//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""BasketBall"",
            ""id"": ""1826ce5e-c553-4964-8d6c-cd0c527770fa"",
            ""actions"": [
                {
                    ""name"": ""Grab_R"",
                    ""type"": ""Button"",
                    ""id"": ""c8a25fa3-cbe9-47cc-a2f9-786900e6aff8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grab_L"",
                    ""type"": ""Button"",
                    ""id"": ""c5d4023f-ecf8-4f8a-adc6-7e01048083ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpawnBall"",
                    ""type"": ""Button"",
                    ""id"": ""26c7622c-8c07-4d24-9347-8bd473e5533c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eb1ab3ec-d04a-414a-8436-6ef703c21835"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab_R"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c7938d6-c573-453d-8ebf-dadd8663b54a"",
                    ""path"": ""<XRController>{RightHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab_R"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08dd3853-8c81-4e38-82c9-4ad4b9a12bb0"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab_L"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1dab134f-f4eb-40de-8504-a0398ae5793f"",
                    ""path"": ""<XRController>{LeftHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab_L"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cef3cf06-11f4-4357-9d7d-c1f257fea2d0"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpawnBall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""BBall"",
            ""bindingGroup"": ""BBall"",
            ""devices"": []
        }
    ]
}");
        // BasketBall
        m_BasketBall = asset.FindActionMap("BasketBall", throwIfNotFound: true);
        m_BasketBall_Grab_R = m_BasketBall.FindAction("Grab_R", throwIfNotFound: true);
        m_BasketBall_Grab_L = m_BasketBall.FindAction("Grab_L", throwIfNotFound: true);
        m_BasketBall_SpawnBall = m_BasketBall.FindAction("SpawnBall", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BasketBall
    private readonly InputActionMap m_BasketBall;
    private List<IBasketBallActions> m_BasketBallActionsCallbackInterfaces = new List<IBasketBallActions>();
    private readonly InputAction m_BasketBall_Grab_R;
    private readonly InputAction m_BasketBall_Grab_L;
    private readonly InputAction m_BasketBall_SpawnBall;
    public struct BasketBallActions
    {
        private @InputMaster m_Wrapper;
        public BasketBallActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Grab_R => m_Wrapper.m_BasketBall_Grab_R;
        public InputAction @Grab_L => m_Wrapper.m_BasketBall_Grab_L;
        public InputAction @SpawnBall => m_Wrapper.m_BasketBall_SpawnBall;
        public InputActionMap Get() { return m_Wrapper.m_BasketBall; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasketBallActions set) { return set.Get(); }
        public void AddCallbacks(IBasketBallActions instance)
        {
            if (instance == null || m_Wrapper.m_BasketBallActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BasketBallActionsCallbackInterfaces.Add(instance);
            @Grab_R.started += instance.OnGrab_R;
            @Grab_R.performed += instance.OnGrab_R;
            @Grab_R.canceled += instance.OnGrab_R;
            @Grab_L.started += instance.OnGrab_L;
            @Grab_L.performed += instance.OnGrab_L;
            @Grab_L.canceled += instance.OnGrab_L;
            @SpawnBall.started += instance.OnSpawnBall;
            @SpawnBall.performed += instance.OnSpawnBall;
            @SpawnBall.canceled += instance.OnSpawnBall;
        }

        private void UnregisterCallbacks(IBasketBallActions instance)
        {
            @Grab_R.started -= instance.OnGrab_R;
            @Grab_R.performed -= instance.OnGrab_R;
            @Grab_R.canceled -= instance.OnGrab_R;
            @Grab_L.started -= instance.OnGrab_L;
            @Grab_L.performed -= instance.OnGrab_L;
            @Grab_L.canceled -= instance.OnGrab_L;
            @SpawnBall.started -= instance.OnSpawnBall;
            @SpawnBall.performed -= instance.OnSpawnBall;
            @SpawnBall.canceled -= instance.OnSpawnBall;
        }

        public void RemoveCallbacks(IBasketBallActions instance)
        {
            if (m_Wrapper.m_BasketBallActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBasketBallActions instance)
        {
            foreach (var item in m_Wrapper.m_BasketBallActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BasketBallActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BasketBallActions @BasketBall => new BasketBallActions(this);
    private int m_BBallSchemeIndex = -1;
    public InputControlScheme BBallScheme
    {
        get
        {
            if (m_BBallSchemeIndex == -1) m_BBallSchemeIndex = asset.FindControlSchemeIndex("BBall");
            return asset.controlSchemes[m_BBallSchemeIndex];
        }
    }
    public interface IBasketBallActions
    {
        void OnGrab_R(InputAction.CallbackContext context);
        void OnGrab_L(InputAction.CallbackContext context);
        void OnSpawnBall(InputAction.CallbackContext context);
    }
}
